@inherits BUICore

@inject IThemeState ThemeState

<BUIDialogConfirm OnSave="OnSave" OnCancel="OnCancel">
	<MudText Typo="Typo.h6">Theme Colors</MudText>
	<MudTextField Label="Name" @bind-Value="LoadedConfig.Name" MaxLength="50" HelperText="Change name and save to create new Theme." />
	<MudGrid>
		@foreach (ColorData item in ColorSettings)
		{
			<MudItem xs="12" sm="6" md="4" lg="3" xl="2">
				<MudColorPicker Label="@item.MemberName"
					Value="@item.HexValue"
					ValueChanged="(color => ApplyColorUpdate(color.Value, item))"
					DisableToolbar="false"
					/>
			</MudItem>
		}
	</MudGrid>
	<MudPaper Class="d-flex flex-wrap">
		<MudPaper>
			<MudText Typo="Typo.caption">Default</MudText>
			<MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Large" />
		</MudPaper>
		<MudPaper>
			<MudText Typo="Typo.caption">Primary</MudText>
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
		</MudPaper>
		<MudPaper>
			<MudText Typo="Typo.caption">Secondary</MudText>
			<MudProgressCircular Color="Color.Secondary" Indeterminate="true" Size="Size.Large" />
		</MudPaper>
		<MudPaper>
			<MudText Typo="Typo.caption">Tertiary</MudText>
			<MudProgressCircular Color="Color.Tertiary" Indeterminate="true" Size="Size.Large" />
		</MudPaper>
		<MudPaper>
			<MudText Typo="Typo.caption">Info</MudText>
			<MudProgressCircular Color="Color.Info" Indeterminate="true" Size="Size.Large" />
		</MudPaper>
		<MudPaper>
			<MudText Typo="Typo.caption">Success</MudText>
			<MudProgressCircular Color="Color.Success" Indeterminate="true" Size="Size.Large" />
		</MudPaper>
		<MudPaper>
			<MudText Typo="Typo.caption">Warning</MudText>
			<MudProgressCircular Color="Color.Warning" Indeterminate="true" Size="Size.Large" />
		</MudPaper>
		<MudPaper>
			<MudText Typo="Typo.caption">Error</MudText>
			<MudProgressCircular Color="Color.Error" Indeterminate="true" Size="Size.Large" />
		</MudPaper>
		<MudPaper>
			<MudText Typo="Typo.caption">Dark</MudText>
			<MudProgressCircular Color="Color.Dark" Indeterminate="true" Size="Size.Large" />
		</MudPaper>
	</MudPaper>
</BUIDialogConfirm>

@code {

	private List<ColorData> ColorSettings { get; set; } = new();
	private ThemeConfig LoadedConfig { get; set; } = new();
	private ThemeState State => (ThemeState)ThemeState;
	private ThemeConfig StartingConfig { get; set; } = new();

	protected override Task OnInitializedAsync()
	{
		LoadedConfig = ThemeState.Current;
		StartingConfig = LoadedConfig.Copy;
		BuildColorSetting();
		return base.OnInitializedAsync();
	}

	private void ApplyColorUpdate(string hexValue, ColorData color)
	{
		color.HexValue = hexValue;
		ThemeConfig config = LoadedConfig;
		Type configType = config.GetType();
		PropertyInfo? info = configType.GetProperty(color.MemberName);
		if (info == null) { return; }
		ColorData newValue = hexValue;
		info.SetValue(config, newValue);
		State.TriggerChange();
	}

	private void BuildColorSetting()
	{
		ThemeConfig config = LoadedConfig;
		Type configType = config.GetType();
		PropertyInfo[] configFields = configType.GetProperties();
		List<ColorData> colorSettings = new();
		foreach (PropertyInfo info in configFields)
		{
			if (info.PropertyType != typeof(ColorData)) { continue; }
			object? value = info.GetValue(config);
			if (value == null) { continue; }
			if (value is ColorData color)
			{
				colorSettings.Add(ColorData.Create(config.GetDisplay(info.Name), info.Name, color));
			}
		}
		ColorSettings = colorSettings;
	}

	private void OnSave()
	{
		if (LoadedConfig.Name != StartingConfig.Name)
		{
			SaveNew();
			return;
		}
		StartingConfig.CopyValues(LoadedConfig);
		Snackbar.Add("Current theme updated!", Severity.Info);
	}

	private void SaveNew()
	{
		List<ThemeConfig> list = ThemeState.Themes;
		foreach (ThemeConfig config in list)
		{
			if (config.Name == LoadedConfig.Name && config.Id != LoadedConfig.Id)
			{
				config.CopyValues(LoadedConfig);
				LoadedConfig.CopyValues(StartingConfig);
				ThemeState.Current = config;
				Snackbar.Add($"Updated theme {config.Name}!", Severity.Info);
				return;
			}
		}
		ThemeConfig newConfig = new();
		newConfig.CopyValues(LoadedConfig);
		LoadedConfig.CopyValues(StartingConfig);
		ThemeState.Themes.Add(newConfig);
		ThemeState.Current = newConfig;
		Snackbar.Add($"Added theme {newConfig.Name}!", Severity.Info);
	}

	private void OnCancel()
	{
		LoadedConfig.CopyValues(StartingConfig);
	}
}
