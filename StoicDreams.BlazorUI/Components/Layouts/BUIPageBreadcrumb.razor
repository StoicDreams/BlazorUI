@using Microsoft.AspNetCore.Components.Routing
@inherits BUICore
@inject NavigationManager NavManager

@if (IsNavigating)
{
	<MudProgressLinear Indeterminate="true" Color="Color.Tertiary" Striped="true" Size="Size.Small" />
}

@if (ShowBreadcrumb)
{
	<MudBreadcrumbs Items="Items" Separator="/" />
}

@code {
	private List<BreadcrumbItem> Items { get; set; } = new();
	private bool ShowBreadcrumb { get => GetState<bool>(AppStateDataTags.BreadcrumbEnabled);  }
	private bool IsNavigating { get => GetState<bool>(AppStateDataTags.IsNavigating); }

	protected override Task OnInitializedAsync()
	{
		SetBreadcrumbItems(NavManager.ToBaseRelativePath(NavManager.Uri));
		NavManager.LocationChanged += HandleLocationChange;
		return base.OnInitializedAsync();
	}

	public override void Dispose()
	{
		NavManager.LocationChanged -= HandleLocationChange;
		base.Dispose();
	}

	private void HandleLocationChange(object? sender, LocationChangedEventArgs args)
	{
		SetBreadcrumbItems(NavManager.ToBaseRelativePath(args.Location));
	}

	private Dictionary<string, string> GetNavIconMap
	{
		get
		{
			Dictionary<string, string> map = new();
			List<NavDetail> nav = GetState<List<NavDetail>>(AppStateDataTags.NavList) ?? new();
			AddItemsToMap(map, nav);
			return map;
		}
	}

	private void AddItemsToMap(Dictionary<string, string> map, List<NavDetail> navList)
	{
		foreach (NavDetail item in navList)
		{
			if (item.IsNavGroup)
			{
				AddItemsToMap(map, item.SubNav);
				continue;
			}
			if (string.IsNullOrWhiteSpace(item.Href)) { continue; }
			map[item.Href.ToLower()] = item.Icon;
		}
	}

	private void SetBreadcrumbItems(string location)
	{
		Dictionary<string, string> map = GetNavIconMap;
		string[] split = location.Split('/', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
		List<BreadcrumbItem> items = new();
		bool homeIsDisabled = split.Length == 0 || (split.Length == 1 && split[0] == "home");
		items.Add(new BreadcrumbItem("Home", "/", homeIsDisabled, map.ContainsKey("/") ? map["/"] : Icons.Material.TwoTone.Home));
		string path = "";

		for (int index = 0; index < split.Length; ++index)
		{
			path += $"/{split[index]}".ToLower();
			if (!map.ContainsKey(path)) { continue; }
			BreadcrumbItem item = new(split[index], path, index == split.Length - 1, map[path]);
			items.Add(item);
		}
		Items = items;
		StateHasChanged();
	}
}