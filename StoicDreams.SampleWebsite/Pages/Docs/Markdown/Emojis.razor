@inherits BUIPage
@page "/docs/markdown/emojis"
@inject IApiRequest ApiRequest

<BUIMarkdown Markup="@PageIntroduction" />

<BUIPaper PaperType="PaperTypes.Wrap" Class="emoji-tables gap-4">
	@if (CachedList == null)
	{
		<MudSkeleton Animation="Animation.Wave" Width="100%" Height="800px" />
	}
	else
	{
		<MudVirtualize Items="CachedList" Context="item">
			<BUIPaper PaperType="PaperTypes.None" Class="center">
				<BUIMarkdown Markup="@item" />
			</BUIPaper>
		</MudVirtualize>
	}
</BUIPaper>

@code {
	private string PageIntroduction => "## Our Markdown supports Emojis :wink:!";

	protected override Task OnInitializedAsync()
	{
		Title = "Markdown Emojis";
		_ = LoadEmojis();
		return base.OnInitializedAsync();
	}

	private async Task LoadEmojis()
	{
		SetAppState(AppStateDataTags.IsLoadingPage, true);
		TResult<string[]> result = await ApiRequest.GetAsync<string[]>("https://cdn.stoicdreams.com/bui/emojis.json", true);
		if (!result.IsOkay)
		{
			SetAppState(AppStateDataTags.IsLoadingPage, false);
			return;
		}
		CachedList = BuildMarkdownList(result.Result);
		SetAppState(AppStateDataTags.IsLoadingPage, false);
		StateHasChanged();
	}

	private static List<string>? CachedList { get; set; }

	private static List<string> BuildMarkdownList(string[] inputList)
	{
		List<string> list = new();
		int maxColumnCount = 3, maxRowCount = 10;
		StringBuilder markup = new(), rowEmoji = new(), rowText = new();
		string[] header = new string[maxColumnCount];
		Array.Fill(header, "     ");
		markup.AppendLine($"|{string.Join('|', header)}|");
		Array.Fill(header, " --- ");
		markup.AppendLine($"|{string.Join('|', header)}|");
		rowEmoji.Append("|");
		rowText.Append("|");
		for (int index = 0, col = 0, row = 0; index < inputList.Length; ++index)
		{
			rowEmoji.Append($" {inputList[index]} |");
			rowText.Append($" `{inputList[index]}` |");
			++col;
			if (col >= maxColumnCount)
			{
				col = 0;
				markup.AppendLine(rowEmoji.ToString());
				markup.AppendLine(rowText.ToString());
				rowEmoji.Clear();
				rowText.Clear();
				++row;
				if (row >= maxRowCount)
				{
					row = 0;
					list.Add(markup.ToString());
					markup.Clear();
					Array.Fill(header, "     ");
					markup.AppendLine($"|{string.Join('|', header)}|");
					Array.Fill(header, " --- ");
					markup.AppendLine($"|{string.Join('|', header)}|");
				}
				rowEmoji.Append("|");
				rowText.Append("|");
			}
		}
		markup.AppendLine(rowEmoji.ToString());
		markup.AppendLine(rowText.ToString());
		markup.AppendLine("");
		list.Add(markup.ToString());
		return list;
	}
}
