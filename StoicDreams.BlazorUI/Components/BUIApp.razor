@inherits BUICore

@using Microsoft.AspNetCore.Components.Routing
@inject IJSRuntime JSRuntime
@inject IJsInterop JSInterop

<MudBlazor.MudThemeProvider />
<MudBlazor.MudDialogProvider />
<MudBlazor.MudSnackbarProvider />

<PageTitle>@AppTitle</PageTitle>

<Router AppAssembly="@AppAssembly">
	<Found Context="routeData">
		<LayoutView Layout="@AppLayout">
			<BlazorTransitionableRoute.TransitionableRoutePrimary RouteData="@routeData" ForgetStateOnTransition="true">
				<BlazorTransitionableRoute.TransitionableRouteView DefaultLayout="@PageLayout" />
			</BlazorTransitionableRoute.TransitionableRoutePrimary>
			<BlazorTransitionableRoute.TransitionableRouteSecondary RouteData="@routeData" ForgetStateOnTransition="true">
				<BlazorTransitionableRoute.TransitionableRouteView DefaultLayout="@PageLayout" />
			</BlazorTransitionableRoute.TransitionableRouteSecondary>
		</LayoutView>
	</Found>
	<NotFound>
		<PageTitle>Not found</PageTitle>
		<LayoutView Layout="@AppLayout">
			<DynamicComponent Type="PageNotFound" />
		</LayoutView>
	</NotFound>
</Router>

@if (AppStartup != null) {
	<DynamicComponent Type="AppStartup" />
}

@code {
	private Assembly AppAssembly => Assembly.GetEntryAssembly() ?? Assembly.GetCallingAssembly();
	private Type AppLayout => HiddenOptions.MainLayout;
	private Type PageLayout => typeof(BUIPageLayout);
	private Type PageNotFound => HiddenOptions.PageNotFound;
	private Type? AppStartup => HiddenOptions.AppStartupComponent;

	private string AppTitle => AppOptions.TitleFormat
			.Replace("{AppName}", AppOptions.AppName)
			.Replace("{PageTitle}", AppState.GetData<string>(AppStateDataTags.PageTitle) ?? string.Empty)
			;

	protected override async Task OnInitializedAsync()
	{
		await RunDefaultSetups();
		await RunSetupFromOptions();
		await base.OnInitializedAsync();
		// Trigger to clear any values from startup, not expecting anything to be expecting AppInitialized key.
		AppState.TriggerChange("AppInitialized");
	}

	private async Task RunDefaultSetups()
	{
		AppState.SetData(AppStateDataTags.NavTransitionOutMilliseconds, 300);
		AppState.SetData(AppStateDataTags.NavTransitionInMilliseconds, 300);
		await JSInterop.AddCSSFile("css/routetransition.4.0.0.min.css");
		await JSInterop.AddJSFile("jsInterop.js");
	}

	private async ValueTask RunSetupFromOptions()
	{
		foreach (string file in AppOptions.CssFiles)
		{
			await JSInterop.AddCSSFile(file);
		}
		foreach (string file in AppOptions.JavascriptFiles)
		{
			await JSInterop.AddJSFile(file);
		}
		foreach (ElementDetail detail in AppOptions.HeadElements)
		{
			await JSInterop.AddElementToHead(detail.TagName, detail.Attributes);
		}
		foreach (ElementDetail detail in AppOptions.BodyElements)
		{
			await JSInterop.AddElementToBody(detail.TagName, detail.Attributes);
		}
		((AppOptions)AppOptions).ApplyStartupState?.Invoke(AppState);
	}
}
