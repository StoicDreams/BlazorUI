@inherits BUICore
@inject IDialogService DialogService
@inject IThemeState ThemeState

<BUIDrawerHeader>App Settings</BUIDrawerHeader>

<BUIDrawerPaper>
	@if (ShowThemeSelector)
	{
		@if (FlipState)
		{
			<MudSelect Label="Select Theme" FullWidth="true" Value="@SelectedId" ValueChanged="(Guid id) => HandleThemeChange(id)">
				@foreach (ThemeConfig config in LoadedThemes)
				{
					<MudSelectItem Value="@config.Id">@config.Name</MudSelectItem>
				}
			</MudSelect>
		}
		else
		{
			<MudSelect Label="Select Theme" FullWidth="true" Value="@SelectedId" ValueChanged="(Guid id) => HandleThemeChange(id)">
				@foreach (ThemeConfig config in LoadedThemes)
				{
					<MudSelectItem Value="@config.Id">@config.Name</MudSelectItem>
				}
			</MudSelect>
		}
	}
	<MudButton Icon="@Icons.Material.Filled.DisplaySettings" Color="Color.Primary" Title="View Theme Settings Manager" OnClick="OpenThemeSettings" FullWidth="true">Theme Settings</MudButton>
</BUIDrawerPaper>

<BUIDrawerPaper>
	<MudSwitch Label="Dense Title Bar" @bind-Checked="DenseTitlebar" Color="Color.Primary" />
	<MudSwitch Label="Breadcrumb Enabled" @bind-Checked="ShowBreadcrumb" Color="Color.Primary" />
</BUIDrawerPaper>

<BUIDrawerPaper>
	<MudSelect Label="Nav Menu Active Color" @bind-Value="@NavActiveColor">
		<MudSelectItem Value="@Color.Inherit">@Color.Inherit</MudSelectItem>
		<MudSelectItem Value="@Color.Primary">@Color.Primary</MudSelectItem>
		<MudSelectItem Value="@Color.Secondary">@Color.Secondary</MudSelectItem>
		<MudSelectItem Value="@Color.Tertiary">@Color.Tertiary</MudSelectItem>
		<MudSelectItem Value="@Color.Info">@Color.Info</MudSelectItem>
		<MudSelectItem Value="@Color.Success">@Color.Success</MudSelectItem>
		<MudSelectItem Value="@Color.Warning">@Color.Warning</MudSelectItem>
		<MudSelectItem Value="@Color.Error">@Color.Error</MudSelectItem>
		<MudSelectItem Value="@Color.Dark">@Color.Dark</MudSelectItem>
	</MudSelect>
</BUIDrawerPaper>

@if (TryGetSubContent(out Type? subComponent))
{
	<DynamicComponent Type="subComponent" />
}

@code {
	private bool ShowThemeSelector => LoadedThemes.Count > 1;
	private Guid SelectedId => ThemeState.Current.Id;
	private bool DenseTitlebar { get => GetState<bool>(AppStateDataTags.TitleBarIsDense); set => SetStateWithTrigger(AppStateDataTags.TitleBarIsDense, value); }
	private bool ShowBreadcrumb { get => GetState<bool>(AppStateDataTags.BreadcrumbEnabled); set => SetStateWithTrigger(AppStateDataTags.BreadcrumbEnabled, value); }
	private Color NavActiveColor { get => GetState<Color>(AppStateDataTags.NavMenuActiveColor); set => SetStateWithTrigger(AppStateDataTags.NavMenuActiveColor, value); }

	private List<ThemeConfig> LoadedThemes { get; set; } = new();

	protected override Task OnInitializedAsync()
	{
		ThemeState.SubscribeToDataChanges(ComponentId, HandleThemesUpdate);
		LoadedThemes = ThemeState.Themes;
		return base.OnInitializedAsync();
	}

	public override void Dispose()
	{
		ThemeState.UnsubscribeToDataChanges(ComponentId);
		base.Dispose();
	}

	private bool TryGetSubContent(out Type? subContent)
	{
		subContent = GetState<Type>(AppStateDataTags.AppSettingsSubComponent);
		return subContent != null;
	}

	private void HandleThemesUpdate()
	{
		InvokeAsync(() =>
		{
			LoadedThemes = ThemeState.Themes;
			FlipState = !FlipState;
			StateHasChanged();
		});
	}

	private void HandleThemeChange(Guid id)
	{
		foreach (ThemeConfig config in LoadedThemes)
		{
			if (config.Id != id) { continue; }
			ThemeState.Current = config;
			return;
		}
	}

	private void OpenThemeSettings()
	{
		DialogOptions options = new()
			{
				DisableBackdropClick = true
			};
		DialogService.Show<BUIThemeSettings>("Theme Settings Manager", options);
		AppState.ApplyChanges(() =>
		{
			AppState.SetData(AppStateDataTags.TitleBarRightDrawerOpen, false);
		});
	}
}
