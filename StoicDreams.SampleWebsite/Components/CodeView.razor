@inherits BUICore
@inject IApiRequest ApiRequest
@inject IMarkdown Markdown

<BUITitledSection Class="@Class" Elevation="Elevation" ContentClass="d-flex justify-center" IsInitiallyExpanded="IsExpanded" IsExpandedChanged="ExpandedChanged">
	<TitleContent>
		<div class="mud-typography">@Title</div>
	</TitleContent>
	<ChildContent>
		@if (IsLoading)
		{
			<BUIProgressBar />
		}
		else if (IsError)
		{
			<MudAlert Severity="Severity.Error">@Content</MudAlert>
		}
		else
		{
			@GetDisplay
		}
	</ChildContent>
</BUITitledSection>

@code {
	[Parameter]
	public string Title { get; set; } = string.Empty;
	[Parameter]
	public string BaseUrl { get; set; } = "https://raw.githubusercontent.com/StoicDreams/BlazorUI/main/StoicDreams.SampleWebsite/";
	[Parameter]
	public string File { get; set; } = string.Empty;
	[Parameter]
	public string FileType { get; set; } = "razor";
	[Parameter]
	public string Content { get; set; } = string.Empty;
	[Parameter]
	public string Class { get; set; } = "";
	[Parameter]
	public int Elevation { get; set; } = 20;
	[Parameter]
	public bool IsExpanded { get; set; }

	private bool IsLoading => string.IsNullOrEmpty(Content);
	private bool IsError { get; set; }

	private MarkupString GetDisplay => Markdown.GetMarkup($@"
```{FileType}
{Content}
```
".Trim());

	protected override async Task OnInitializedAsync()
	{
		if (string.IsNullOrWhiteSpace(Title))
		{
			Title = !string.IsNullOrWhiteSpace(File) ? "File Code" : "Code";
		}
		if (IsExpanded)
		{
			_ = LoadFile();
		}
		await base.OnInitializedAsync();
	}

	private async Task ExpandedChanged(bool newVal)
	{
		IsExpanded = newVal;
		if (IsLoading)
		{
			await LoadFile();
		}
	}

	private async ValueTask LoadFile()
	{
		if (string.IsNullOrWhiteSpace(File)) { return; }
		if (CachedFiles.TryGetValue(File, out string? cachedContent))
		{
			Content = cachedContent;
			return;
		}
		TResult<string> fileContent = await ApiRequest.GetAsync<string>($"{BaseUrl}{File}");
		if (!fileContent.IsOkay)
		{
			Content = FirstNotEmpty(fileContent.Result, fileContent.Message, "Unable to load file.");
			IsError = true;
			return;
		}
		Content = fileContent.Result;
		CachedFiles[File] = Content;
		StateHasChanged();
	}

	private static Dictionary<string, string> CachedFiles { get; } = new();
}
