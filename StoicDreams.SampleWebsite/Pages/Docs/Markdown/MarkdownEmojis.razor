@inherits BUICore

@page "/docs/markdown/emojis"
@inject HttpClient Client
@inject ISnackbar SnackBar
@inject IApiRequest ApiRequest

@using System.Text

<BUIPageDetail Title="Markdown Emojis" />

<BUIMarkdown Markup="@TopMarkup" />

@if (CachedList != null)
{
	<MudPaper Class="emoji-tables d-flex align-content-start flex-wrap flex-grow-1 gap-4" MaxWidth="100%">
		<MudVirtualize Items="CachedList" Context="item">
			<MudPaper Class="center">
				<BUIMarkdown Markup="@item" />
			</MudPaper>
		</MudVirtualize>
	</MudPaper>
}
else
{
	<MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="800px" Animation="Animation.Wave" />
}

@code {
	private string TopMarkup { get; } = @"
## Our Markdown supports Emojis :wink:!
".Trim();

	protected override Task OnInitializedAsync()
	{
		SetState(AppStateDataTags.IsNavigating, true);
		_ = LoadEmojies();
		return base.OnInitializedAsync();
	}

	private async Task LoadEmojies()
	{
		TResult<string[]> result = await ApiRequest.Get<string[]>("https://www.myfi.ws/bui/emojis.json", true);
		if (result.Status != TResultStatus.Success)
		{
			SnackBar.Add($"Failed to load emojis. {result.Message}", Severity.Error);
			SetState(AppStateDataTags.IsNavigating, false);
			return;
		}
		CachedList = BuildMarkdownList(result.Result);
		SetState(AppStateDataTags.IsNavigating, false);
		StateHasChanged();
	}

	private static List<string>? CachedList { get; set; }

	private static List<string> BuildMarkdownList(string[] inputList)
	{
		List<string> list = new();
		int maxColumnCount = 3, maxRowCount = 10;
		StringBuilder markup = new(), rowEmoji = new(), rowText = new();
		string[] header = new string[maxColumnCount];
		Array.Fill(header, "     ");
		markup.AppendLine($"|{string.Join('|', header)}|");
		Array.Fill(header, " --- ");
		markup.AppendLine($"|{string.Join('|', header)}|");
		rowEmoji.Append("|");
		rowText.Append("|");
		for (int index = 0, col = 0, row = 0; index < inputList.Length; ++index)
		{
			rowEmoji.Append($" {inputList[index]} |");
			rowText.Append($" `{inputList[index]}` |");
			++col;
			if (col >= maxColumnCount)
			{
				col = 0;
				markup.AppendLine(rowEmoji.ToString());
				markup.AppendLine(rowText.ToString());
				rowEmoji.Clear();
				rowText.Clear();
				++row;
				if (row >= maxRowCount)
				{
					row = 0;
					list.Add(markup.ToString());
					markup.Clear();
					Array.Fill(header, "     ");
					markup.AppendLine($"|{string.Join('|', header)}|");
					Array.Fill(header, " --- ");
					markup.AppendLine($"|{string.Join('|', header)}|");
				}
				rowEmoji.Append("|");
				rowText.Append("|");
			}
		}
		markup.AppendLine(rowEmoji.ToString());
		markup.AppendLine(rowText.ToString());
		markup.AppendLine("");
		list.Add(markup.ToString());
		return list;
	}
}
