@inherits BUICoreLayout

<MudLayout>
	@if (AppOptions.TitleBarPosition == TitleBarPosition.Top)
	{
		<BUITitleBar />
	}
	<MudDrawer @bind-Open="@LeftDrawerOpen" Anchor="Anchor.Left" Elevation="0" Variant="@LeftDrawerVariant" ClipMode="DrawerClipMode.Docked">
		@if (LeftDrawerContent != null)
		{
			<ErrorBoundary>
				<ChildContent>
					<DynamicComponent Type="LeftDrawerContent" />
				</ChildContent>
				<ErrorContent>
					<MudAlert Severity="Severity.Error">Failed to load expected content.</MudAlert>
				</ErrorContent>
			</ErrorBoundary>
		}
	</MudDrawer>
	<MudDrawer @bind-Open="@RightDrawerOpen" Anchor="Anchor.Right" Elevation="0" Variant="@RightDrawerVariant">
		@if (RightDrawerContent != null)
		{
			<ErrorBoundary>
				<ChildContent>
					<DynamicComponent Type="RightDrawerContent" />
				</ChildContent>
				<ErrorContent>
					<MudAlert Severity="Severity.Error">Failed to load expected content.</MudAlert>
				</ErrorContent>
			</ErrorBoundary>
		}
	</MudDrawer>
	<MudMainContent>
		@Body
	</MudMainContent>
	@if (AppOptions.TitleBarPosition == TitleBarPosition.Bottom)
	{
		<BUITitleBar />
	}
</MudLayout>

@code {
	private bool LeftDrawerOpen { get => GetState<bool>(AppStateDataTags.TitleBarLeftDrawerOpen); set => AppState.SetData<bool>(AppStateDataTags.TitleBarLeftDrawerOpen, value); }
	private bool RightDrawerOpen { get => GetState<bool>(AppStateDataTags.TitleBarRightDrawerOpen); set => AppState.SetData<bool>(AppStateDataTags.TitleBarRightDrawerOpen, value); }
	private DrawerVariant LeftDrawerVariant { get => GetState<DrawerVariant>(AppStateDataTags.AppLeftDrawerVariant); set => AppState.SetData<DrawerVariant>(AppStateDataTags.AppLeftDrawerVariant, value); }
	private DrawerVariant RightDrawerVariant { get => GetState<DrawerVariant>(AppStateDataTags.AppRightDrawerVariant); set => AppState.SetData<DrawerVariant>(AppStateDataTags.AppRightDrawerVariant, value); }
	private Type? LeftDrawerContent => GetState<Type?>(AppStateDataTags.LeftDrawerContent);
	private Type? RightDrawerContent => GetState<Type?>(AppStateDataTags.RightDrawerContent);

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
	}
}