@inherits BUICore

@using Microsoft.AspNetCore.Components.Routing
@inject IJSRuntime JSRuntime
@inject IJsInterop JSInterop
@inject IThemeState ThemeState

<MudBlazor.MudThemeProvider />
<MudBlazor.MudDialogProvider
	MaxWidth="MaxWidth.ExtraExtraLarge"
	DisableBackdropClick="true"
	Position="DialogPosition.Center"
	/>
<MudBlazor.MudSnackbarProvider />
<BUIThemeManager />

<BUITitleSync />

@if (IsLoadingApp)
{
	<MudPaper Height="100%" Width="100%" Class="d-flex align-center justify-center">
		<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
	</MudPaper>
}
else
{
	<Router AppAssembly="@AppAssembly" AdditionalAssemblies="FrameworkAssemblies" OnNavigateAsync="HandleNavigationStart">
		<Found Context="routeData">
			<BUIAuthRouting>
				<LayoutView Layout="@AppLayout">
					<BlazorTransitionableRoute.TransitionableRoutePrimary RouteData="@routeData" ForgetStateOnTransition="true">
						<BlazorTransitionableRoute.TransitionableRouteView DefaultLayout="@PageLayout" />
					</BlazorTransitionableRoute.TransitionableRoutePrimary>
					<BlazorTransitionableRoute.TransitionableRouteSecondary RouteData="@routeData" ForgetStateOnTransition="true">
						<BlazorTransitionableRoute.TransitionableRouteView DefaultLayout="@PageLayout" />
					</BlazorTransitionableRoute.TransitionableRouteSecondary>
				</LayoutView>
			</BUIAuthRouting>
		</Found>
		<NotFound>
			@if (FlipState)
			{
				<LayoutView Layout="@AppLayout">
					<div class="page-transitional">
						<DynamicComponent Type="PageNotFound" />
					</div>
				</LayoutView>
			}
			else
			{
				<LayoutView Layout="@AppLayout">
					<div class="page-transitional">
						<DynamicComponent Type="PageNotFound" />
					</div>
				</LayoutView>
			}
		</NotFound>
	</Router>
}

@if (AppStartup != null) {
	<DynamicComponent Type="AppStartup" />
}

<LinkerReferenceLoader />


@code {
	private Assembly AppAssembly => Assembly.GetEntryAssembly() ?? Assembly.GetCallingAssembly();
	private Type AppLayout => HiddenOptions.MainLayout;
	private Type PageLayout => typeof(BUIPageLayout);
	private Type PageNotFound => HiddenOptions.PageNotFound;
	private Type? AppStartup => HiddenOptions.AppStartupComponent;
	private IEnumerable<Assembly> FrameworkAssemblies => new Assembly[] { typeof(BUIApp).Assembly };
	private bool IsLoadingApp { get; set; } = true;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		await RunDefaultSetups();
		// Trigger to clear any values from startup, not expecting anything to be expecting AppInitialized key.
		await AppState.TriggerChangeAsync("AppInitialized");
		IsLoadingApp = false;
	}

	private async Task RunDefaultSetups()
	{
		AppState.SetupDefaultAppStates();
		await JSInterop.SetupDefaultJsInterop(AppOptions, AppState);
		await Auth.CheckLoginFromCache();
	}

	private void HandleNavigationStart(NavigationContext navContext)
	{
		if (navContext.Path == currentNavPath) { return; }
		currentNavPath = navContext.Path;
		FlipState = !FlipState;
		SetAppState(AppStateDataTags.CurrentPage, currentNavPath.Split('?')[0].Split('#')[0]);
		SetAppStateWithTrigger(AppStateDataTags.IsLoadingPage, true);
	}
	private string currentNavPath = "appstartup";
}
