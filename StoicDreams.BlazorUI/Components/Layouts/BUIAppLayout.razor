@inherits BUICoreLayout

<MudLayout>
	@if (AppOptions.TitleBarPosition == TitleBarPosition.Top)
	{
		<BUITitleBar />
	}
	<MudDrawer @bind-Open="@LeftDrawerOpen"
		Anchor="Anchor.Left"
		Elevation="0"
		Variant="@LeftDrawerVariant"
		ClipMode="DrawerClipMode.Docked"
		>
		@if (LeftDrawerContent != null)
		{
			<ErrorBoundary>
				<ChildContent>
					<DynamicComponent Type="LeftDrawerContent" />
				</ChildContent>
				<ErrorContent>
					<MudAlert Severity="Severity.Error">Failed to load expected content.</MudAlert>
				</ErrorContent>
			</ErrorBoundary>
		}
	</MudDrawer>
	<MudDrawer @bind-Open="@RightDrawerOpen"
		Anchor="Anchor.Right"
		Elevation="0"
		Variant="@RightDrawerVariant"
		>
		@if (RightDrawerContent != null)
		{
			<ErrorBoundary>
				<ChildContent>
					<DynamicComponent Type="RightDrawerContent" />
				</ChildContent>
				<ErrorContent>
					<MudAlert Severity="Severity.Error">Failed to load expected content.</MudAlert>
				</ErrorContent>
			</ErrorBoundary>
		}
	</MudDrawer>
	<MudMainContent>
		<BUIPageBreadcrumb />
		@if (AppOptions.TitleBarPosition != TitleBarPosition.Top)
		{
			<DynamicComponent Type="Footer" />
		}
		<main>
			@Body
		</main>
		@if (AppOptions.TitleBarPosition == TitleBarPosition.Top)
		{
			<DynamicComponent Type="Footer" />
		}
	</MudMainContent>
	@if (AppOptions.TitleBarPosition == TitleBarPosition.Bottom)
	{
		<BUITitleBar />
	}
</MudLayout>

@code {
	private bool LeftDrawerOpen { get => GetAppState<bool>(AppStateDataTags.TitleBarLeftDrawerOpen); set => SetDrawerState(AppStateDataTags.TitleBarLeftDrawerOpen, value); }
	private bool RightDrawerOpen { get => GetAppState<bool>(AppStateDataTags.TitleBarRightDrawerOpen); set => SetDrawerState(AppStateDataTags.TitleBarRightDrawerOpen, value); }
	private DrawerVariant LeftDrawerVariant { get => GetAppState<DrawerVariant>(AppStateDataTags.AppLeftDrawerVariant, () => HiddenOptions.LeftDrawerVariant); set => SetAppStateWithTrigger<DrawerVariant>(AppStateDataTags.AppLeftDrawerVariant, value); }
	private DrawerVariant RightDrawerVariant { get => GetAppState<DrawerVariant>(AppStateDataTags.AppRightDrawerVariant, () => HiddenOptions.RightDrawerVariant); set => SetAppStateWithTrigger<DrawerVariant>(AppStateDataTags.AppRightDrawerVariant, value); }
	private Type? LeftDrawerContent => GetAppState<Type?>(AppStateDataTags.LeftDrawerContent);
	private Type? RightDrawerContent => GetAppState<Type?>(AppStateDataTags.RightDrawerContent);
	private Type Footer => HiddenOptions.Footer;

	private void SetDrawerState(AppStateDataTags tag, bool value)
	{
		SetSessionState(tag.AsName(), value);
		SetAppStateWithTrigger(tag, value);
	}

	protected override async Task OnInitializedAsync()
	{
		await LoadStateFromSession<DrawerVariant>(AppStateDataTags.AppLeftDrawerVariant);
		await LoadStateFromSession<DrawerVariant>(AppStateDataTags.AppRightDrawerVariant);
		await base.OnInitializedAsync();
	}
}