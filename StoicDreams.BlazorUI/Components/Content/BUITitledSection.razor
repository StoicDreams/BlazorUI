
<MudExpansionPanels Class="@GetWrapClass" Elevation="Elevation">
	<MudExpansionPanel IsInitiallyExpanded="IsInitiallyExpanded" HideIcon="true" IsExpanded="IsExpanded" IsExpandedChanged="HandleExpandedChange">
		<TitleContent>
			<BUIPaper Class="@GetTitleClass" MaxWidth="">
				@Title
				@TitleContent
				<MudIcon Class="ml-auto" Icon="@GetIcon" Color="IconColor" />
			</BUIPaper>
		</TitleContent>
		<ChildContent>
			<BUIPaper PaperType="PaperTypes.Wrap" Class="@GetContentClass" MaxWidth="">
				@ChildContent
			</BUIPaper>
		</ChildContent>
	</MudExpansionPanel>
</MudExpansionPanels>

@code {
	[Parameter]
	public Color TitleTheme { get; set; } = Color.Primary;
	[Parameter]
	public string Title { get; set; } = string.Empty;
	[Parameter]
	public RenderFragment? TitleContent { get; set; }
	[Parameter]
	public RenderFragment? ChildContent { get; set; }
	[Parameter]
	public string Class { get; set; } = "pa-0";
	[Parameter]
	public string TitleClass { get; set; } = string.Empty;
	[Parameter]
	public string ContentClass { get; set; } = string.Empty;
	[Parameter]
	public int Elevation { get; set; } = 15;
	[Parameter]
	public bool IsInitiallyExpanded { get; set; } = true;
	[Parameter]
	public Color IconColor { get; set; } = Color.Inherit;
	[Parameter]
	public EventCallback<bool> IsExpandedChanged { get; set; }
	[Parameter]
	public bool ExpansionEnabled { get; set; } = true;

	private bool IsExpanded { get; set; }
	private string GetIcon => IsExpanded ? Icons.Material.TwoTone.KeyboardArrowUp : Icons.Material.TwoTone.KeyboardArrowDown;
	private string GetWrapClass => $"bui-titled-section {Class}".Trim();
	private string GetTitleClass => $"mud-theme-{TitleTheme.AsName().ToLower()} d-flex rounded-0 align-center pa-2 {TitleClass}".Trim();
	private string GetContentClass => $"pa-2 {ContentClass}".Trim();

	protected override Task OnInitializedAsync()
	{
		IsExpanded = IsInitiallyExpanded;
		return base.OnInitializedAsync();
	}

	private async Task HandleExpandedChange(bool value)
	{
		if (!ExpansionEnabled) { return; }
		IsExpanded = value;
		await IsExpandedChanged.InvokeAsync(value);
	}
}
