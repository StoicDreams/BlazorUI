@inherits BUICoreLayout

<MudLayout>
	@if (AppOptions.TitleBarPosition == TitleBarPosition.Top)
	{
		<BUITitleBar />
	}
	<MudDrawer @bind-Open="@LeftDrawerOpen" Anchor="Anchor.Left" Elevation="0" Variant="@LeftDrawerVariant" ClipMode="DrawerClipMode.Docked">
		<MudNavMenu>
			<Virtualize Items="@NavList" Context="navItem">
				@if (string.IsNullOrWhiteSpace(navItem.Href))
				{
					<MudNavLink Icon="@navItem.Icon"
						OnClick="() => navItem.OnClick?.Invoke(navItem)"
						>
						@navItem.Name
					</MudNavLink>
				}
				else
				{
					<MudNavLink Icon="@navItem.Icon"
						Href="@navItem.Href"
						OnClick="() => navItem.OnClick?.Invoke(navItem)"
						>
						@navItem.Name
					</MudNavLink>
				}
			</Virtualize>
		</MudNavMenu>
	</MudDrawer>
	<MudDrawer @bind-Open="@RightDrawerOpen" Anchor="Anchor.Right" Elevation="0" Variant="@RightDrawerVariant">

	</MudDrawer>
	<MudMainContent>
		@Body
	</MudMainContent>
	@if (AppOptions.TitleBarPosition == TitleBarPosition.Bottom)
	{
		<BUITitleBar />
	}
</MudLayout>

@code {
	private bool LeftDrawerOpen { get => GetState<bool>(AppStateDataTags.TitleBarLeftDrawerOpen); set => AppState.SetData<bool>(AppStateDataTags.TitleBarLeftDrawerOpen, value); }
	private bool RightDrawerOpen { get => GetState<bool>(AppStateDataTags.TitleBarRightDrawerOpen); set => AppState.SetData<bool>(AppStateDataTags.TitleBarRightDrawerOpen, value); }
	private DrawerVariant LeftDrawerVariant { get => GetState<DrawerVariant>(AppStateDataTags.AppLeftDrawerVariant); set => AppState.SetData<DrawerVariant>(AppStateDataTags.AppLeftDrawerVariant, value); }
	private DrawerVariant RightDrawerVariant { get => GetState<DrawerVariant>(AppStateDataTags.AppRightDrawerVariant); set => AppState.SetData<DrawerVariant>(AppStateDataTags.AppRightDrawerVariant, value); }
	private List<NavDetail> NavList { get => GetState<List<NavDetail>>(AppStateDataTags.NavList) ?? new(); set => AppState.SetData<List<NavDetail>>(AppStateDataTags.NavList, value); }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
	}
}