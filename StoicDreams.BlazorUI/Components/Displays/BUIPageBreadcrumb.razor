@using Microsoft.AspNetCore.Components.Routing
@inherits BUICore

@if (IsNavigating)
{
	<MudProgressLinear Indeterminate="true" Color="ActiveColor" Striped="true" Size="Size.Small" />
}

@if (ShowBreadcrumb)
{
	<MudBreadcrumbs Items="Items" Context="item" Class="mud-theme-dark">
		<SeparatorTemplate>
			<MudIcon Icon="@Icons.Material.Filled.ArrowRight" Class="mt-n2 mb-n2 ml-n3 mr-n3" />
		</SeparatorTemplate>
		<ItemTemplate>
			@if (item.Disabled)
			{
				<MudLink Color="ActiveColor">
					<MudIcon Icon="@item.Icon" Color="ActiveColor" />
					@item.Text
				</MudLink>
			}
			else
			{
				<MudLink Color="Color.Inherit" Href="@item.Href">
					<MudIcon Icon="@item.Icon" />
					@item.Text
				</MudLink>
			}
		</ItemTemplate>
	</MudBreadcrumbs>
}

@code {
	private List<BreadcrumbItem> Items { get; set; } = new();
	private bool ShowBreadcrumb => GetAppState<bool>(AppStateDataTags.BreadcrumbEnabled, () => false);
	private bool IsNavigating => GetIsNavigating;
	private Color ActiveColor => GetAppState<Color>(AppStateDataTags.NavMenuActiveColor, () => Color.Inherit);
	private int MinTransitionProgressTiming => GetAppState<int>(AppStateDataTags.MinNavTransitionProgressDisplay, () => 600);

	protected override async Task OnInitializedAsync()
	{
		await LoadStateFromSession<bool>(AppStateDataTags.BreadcrumbEnabled);
		await LoadStateFromSession<Color>(AppStateDataTags.NavMenuActiveColor);
		SetBreadcrumbItems(NavManager.ToBaseRelativePath(NavManager.Uri));
		NavManager.LocationChanged += HandleLocationChange;
		await base.OnInitializedAsync();
	}

	public override void Dispose()
	{
		NavManager.LocationChanged -= HandleLocationChange;
		base.Dispose();
	}

	protected override void OnAppStateUpdate()
	{
		SetBreadcrumbItems(NavManager.ToBaseRelativePath(NavManager.Uri));
		base.OnAppStateUpdate();
	}

	private Stopwatch NavTimer = Stopwatch.StartNew();
	private bool GetIsNavigating
	{
		get
		{
			bool isNavigating = GetAppState<bool>(AppStateDataTags.IsLoadingPage, () => false);
			if (!isNavigating && NavTimer.ElapsedMilliseconds < MinTransitionProgressTiming)
			{
				int waitForMilliseconds = (int)Math.Max(0, MinTransitionProgressTiming - NavTimer.ElapsedMilliseconds);
				InvokeAsync(() => WaitAndRefresh(waitForMilliseconds));
				return true;
			}
			if (isNavigating)
			{
				NavTimer.Restart();
			}
			return isNavigating;
		}
	}

	private async Task WaitAndRefresh(int milliseconds)
	{
		await Task.Delay(milliseconds);
		StateHasChanged();
	}

	private void HandleLocationChange(object? sender, LocationChangedEventArgs args)
	{
		SetBreadcrumbItems(NavManager.ToBaseRelativePath(args.Location));
	}

	private Dictionary<string, NavDetail> GetNavIconMap
	{
		get
		{
			Dictionary<string, NavDetail> map = new();
			List<NavDetail> nav = GetAppState<List<NavDetail>>(AppStateDataTags.NavList, () => new());
			AddItemsToMap(map, nav);
			return map;
		}
	}

	private void AddItemsToMap(Dictionary<string, NavDetail> map, List<NavDetail> navList)
	{
		foreach (NavDetail item in navList)
		{
			if (item.IsNavGroup)
			{
				AddItemsToMap(map, item.SubNav);
				continue;
			}
			if (string.IsNullOrWhiteSpace(item.Href)) { continue; }
			map[item.Href.ToLower()] = item;
		}
	}

	private void SetBreadcrumbItems(string location)
	{
		Dictionary<string, NavDetail> map = GetNavIconMap;
		string[] split = location.Split('/', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
		List<BreadcrumbItem> items = new();
		bool homeIsDisabled = split.Length == 0 || (split.Length == 1 && split[0] == "home");
		items.Add(new BreadcrumbItem("Home", "/", homeIsDisabled, map.ContainsKey("/") ? map["/"].Icon : Icons.Material.TwoTone.Home));
		string path = "";

		for (int index = 0; index < split.Length; ++index)
		{
			path += $"/{split[index]}".ToLower();
			if (!map.TryGetValue(path, out NavDetail? nav) || !Auth.IsRole(nav.Roles)) { continue; }
			BreadcrumbItem item = new(nav.Name, path, index == split.Length - 1, nav.Icon);
			items.Add(item);
		}
		Items = items;
		StateHasChanged();
	}
}