@inject IMarkdown Markdown

<MudField @ref="MudFieldRef" Label="@Label" HelperText="@HelperText" Class="@Class" Variant="Variant" Error="InErrorState" ErrorText="@ErrorMessage">
	<div class="formatted-textarea" style="@GetStyles">
		@Markdown.GetMarkup(GetMarkdown)
		@if (FlipState)
		{
			<textarea @ref="TextareaRef" id="@FieldId" @oninput="ValueInput" @onblur="ValidateInput" placeholder="@Placeholder">@InternalValue</textarea>
		}
		else
		{
			<textarea @ref="TextareaRef" id="@FieldId" @oninput="ValueInput" @onblur="ValidateInput" placeholder="@Placeholder">@InternalValue</textarea>
		}
	</div>
	@if (ShowCharacterCount)
	{
		<div class="char-count">@CharacterCountDisplay</div>
	}
</MudField>

@code {
	[Parameter]
	public string Class { get; set; } = string.Empty;
	[Parameter]
	public int MinHeight { get; set; } = 100;
	[Parameter]
	public string HelperText { get; set; } = string.Empty;
	[Parameter]
	public string Placeholder { get; set; } = string.Empty;
	[Parameter]
	public string Label { get; set; } = string.Empty;
	[Parameter]
	public bool ShowCharacterCount { get; set; } = true;
	[Parameter]
	public string Value
	{
		get
		{
			return InternalValue;
		}
		set
		{
			if (value == InternalValue) { return; }
			InternalValue = value;
			FlipState = !FlipState;
		}
	}
	[Parameter]
	public EventCallback<string> ValueChanged { get; set; }
	[Parameter]
	public string CodeFormat { get; set; } = string.Empty;
	[Parameter]
	public Variant Variant { get; set; } = Variant.Outlined;
	[Parameter]
	public Func<string, TResult>? Validation { get; set; }

	private bool FlipState { get; set; }
	private string InternalValue { get; set; } = string.Empty;
	private string GetInternValueForPreview => InternalValue.Replace("````", $"`..`");
	private MudField? MudFieldRef { get; set; }
	private ElementReference? TextareaRef { get; set; }
	private string FieldId => MudFieldRef?.FieldId ?? string.Empty;
	private string GetStyles => $"min-height: {MinHeight}px";
	private string CharacterCountDisplay => $"Character Count: {InternalValue.Count():N0}";
	private bool InErrorState { get; set; } = false;
	private string ErrorMessage { get; set; } = string.Empty;

	private int MessageLines { get; set; } = 1;
	private string GetMarkdown => $@"
````{CodeFormat}
{GetInternValueForPreview}
````
".Trim();

	protected override Task OnInitializedAsync()
	{
		return base.OnInitializedAsync();
	}

	private async Task ValueInput(ChangeEventArgs args)
	{
		InternalValue = args.Value?.ToString() ?? string.Empty;
		ValidateInput();
		await ValueChanged.InvokeAsync(InternalValue);
	}

	private void ValidateInput()
	{
		if (Validation == null) return;
		TResult tResult = Validation(InternalValue);
		InErrorState = !tResult.IsOkay;
		ErrorMessage = tResult.Message;
	}
}
