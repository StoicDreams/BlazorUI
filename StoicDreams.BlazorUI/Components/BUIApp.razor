@inherits BUICore

@using Microsoft.AspNetCore.Components.Routing
@inject IJSRuntime JSRuntime
@inject IJsInterop JSInterop
@inject IThemeState ThemeState
@inject NavigationManager NavManager

<MudBlazor.MudThemeProvider />
<MudBlazor.MudDialogProvider
	MaxWidth="MaxWidth.ExtraExtraLarge"
	DisableBackdropClick="true"
	Position="DialogPosition.Center"
	/>
<MudBlazor.MudSnackbarProvider />
<BUIThemeManager />

<BUITitleSync />

<Router AppAssembly="@AppAssembly" AdditionalAssemblies="FrameworkAssemblies" OnNavigateAsync="HandleNavigationStart">
	<Found Context="routeData">
		<LayoutView Layout="@AppLayout">
			<BlazorTransitionableRoute.TransitionableRoutePrimary RouteData="@routeData" ForgetStateOnTransition="true">
				<BlazorTransitionableRoute.TransitionableRouteView DefaultLayout="@PageLayout" />
			</BlazorTransitionableRoute.TransitionableRoutePrimary>
			<BlazorTransitionableRoute.TransitionableRouteSecondary RouteData="@routeData" ForgetStateOnTransition="true">
				<BlazorTransitionableRoute.TransitionableRouteView DefaultLayout="@PageLayout" />
			</BlazorTransitionableRoute.TransitionableRouteSecondary>
		</LayoutView>
	</Found>
	<NotFound>
		@if (FlipState)
		{
			<LayoutView Layout="@AppLayout">
				<div class="page-transitional">
					<DynamicComponent Type="PageNotFound" />
				</div>
			</LayoutView>
		}
		else
		{
			<LayoutView Layout="@AppLayout">
				<div class="page-transitional">
					<DynamicComponent Type="PageNotFound" />
				</div>
			</LayoutView>
		}
	</NotFound>
</Router>

@if (AppStartup != null) {
	<DynamicComponent Type="AppStartup" />
}

<LinkerReferenceLoader />


@code {
	private Assembly AppAssembly => Assembly.GetEntryAssembly() ?? Assembly.GetCallingAssembly();
	private Type AppLayout => HiddenOptions.MainLayout;
	private Type PageLayout => typeof(BUIPageLayout);
	private Type PageNotFound => HiddenOptions.PageNotFound;
	private Type? AppStartup => HiddenOptions.AppStartupComponent;
	private IEnumerable<Assembly> FrameworkAssemblies => new Assembly[] { typeof(BUIApp).Assembly };

	protected override async Task OnInitializedAsync()
	{
		await RunDefaultSetups();
		await base.OnInitializedAsync();
		// Trigger to clear any values from startup, not expecting anything to be expecting AppInitialized key.
		AppState.TriggerChange("AppInitialized");
	}

	private async Task RunDefaultSetups()
	{
		AppState.SetupDefaultAppStates();
		await JSInterop.SetupDefaultJsInterop(AppOptions, AppState);
	}

	private void HandleNavigationStart(NavigationContext navContext)
	{
		if (navContext.Path == currentNavPath) { return; }
		currentNavPath = navContext.Path;
		FlipState = !FlipState;
		SetStateWithTrigger(AppStateDataTags.IsLoadingPage, true);
	}
	private string currentNavPath = "appstartup";
}
