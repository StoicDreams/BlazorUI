# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

stages:
- stage: Alpha
  jobs:
  - job: BlazorUI
    displayName: 'Build and Publish Blazor UI Framework'
    pool:
      vmImage: 'windows-latest'
    variables:
      buildConfiguration: 'Release'
    steps:
      - task: NuGetToolInstaller@1
        inputs:
          versionSpec: '6.x'
          checkLatest: true
      - task: UseDotNet@2
        displayName: 'Load the SDK'
        inputs:
          packageType: 'sdk'
          version: '6.x'
          includePreviewVersions: false
      - task: DotNetCoreCLI@2
        displayName: 'Restore nuget packages'
        inputs:
          command: 'restore'
          projects: |
            **/*.BlazorUI.csproj
            **/*.BuildTests.csproj
          includeNuGetOrg: true
      - task: DotNetCoreCLI@2
        displayName: 'Build and pack the project'
        inputs:
          command: 'build'
          projects: |
            **/*.BlazorUI.csproj
            **/*.BuildTests.csproj
      - task: VisualStudioTestPlatformInstaller@1
      - task: DotNetCoreCLI@2
        displayName: 'Run Build Tests'
        inputs:
          command: 'test'
          projects: '**/*.BuildTests.csproj'
          arguments: '--configuration $(buildConfiguration) --no-restore --collect: "XPlat Code Coverage"'
          publishTestResults: true,
          nobuild: true
      - script: "dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.5.8"
        displayName: "Install ReportGenerator tool"
      - script: 'reportgenerator -reports:**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"'
        displayName: "Create reports"
      - task: PublishCodeCoverageResults@1
        displayName: "Publish code coverage report"
        inputs:
          codeCoverageTool: "Cobertura"
          summaryFileLocation: "$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml"
      - task: Bash@3
        displayName: 'Push package to nuget store'
        inputs:
          targetType: inline
          script: dotnet nuget push --api-key $(NugetApiKey) --skip-duplicate --source $(NugetSource) '$(Agent.BuildDirectory)\NugetPackages\StoicDreams.BlazorUI.*.nupkg' > nugetpush.txt; echo $(cat nugetpush.txt)
      - task: Bash@3
        displayName: 'Echo version number.'
        inputs:
          targetType: inline
          script: pushResult=$(cat nugetpush.txt); re=".*StoicDreams\.BlazorUI\.([0-9\.]+)\.nupkg.*";if [[ $pushResult =~ $re ]]; then echo ${BASH_REMATCH[1]}; fi

  - job: DelayToAllowNugetTimeToPublish
    displayName: 'Give Nuget.org time to process publishing'
    dependsOn:
    - BlazorUI
    condition: succeeded()
    pool: Server
    steps:
    - task: Delay@1
      inputs:
        delayForMinutes: '5'


  - job: BlazorUIWebsite
    displayName: 'Build and Publish Blazor UI Sample Website'
    dependsOn:
    - DelayToAllowNugetTimeToPublish
    condition: succeeded()
    pool:
      vmImage: 'windows-latest'
    variables:
      buildConfiguration: 'Release'
    steps:
      - task: UseDotNet@2
        displayName: 'Set .NET SDK Version'
        inputs:
          packageType: 'sdk'
          version: '6.x'
          includePreviewVersions: false
      - task: DotNetCoreCLI@2
        displayName: 'Restore Nuget Dependencies'
        inputs:
          command: 'restore'
          projects: '**/*SampleWebsite.csproj'
          includeNuGetOrg: true
      - task: DotNetCoreCLI@2
        displayName: 'Build Solution'
        inputs:
          command: 'build'
          arguments: '--configuration $(buildConfiguration)'
          projects: '**/*SampleWebsite.csproj'
      - task: CmdLine@2
        displayName: 'Publish Sample Website'
        inputs:
          script: 'C:\hostedtoolcache\windows\dotnet\dotnet.exe publish $(System.DefaultWorkingDirectory)/StoicDreams.SampleWebsite/StoicDreams.SampleWebsite.csproj --configuration $(buildConfiguration) --no-restore --no-build --self-contained true /p:LinkDuringPublish=false'
      - task: PublishBuildArtifacts@1
        displayName: 'Transfer published files to Artifact container'
        inputs:
          PathtoPublish: 'StoicDreams.SampleWebsite'
          ArtifactName: 'drop'
          publishLocation: 'Container'
